- What is a Priority Queue => a queue where each element has a certain priority which determines the order in which elements are removed from the queue.

- For instance, if the queue holds integer values and the priority given is the lowest integer first then how does the priority queue know which is the lowest integer without comparing it to all the integers already in the queue? It makes use of a heap.

- What is a Heap? => a heap is a specialized tree-based data structure that satisfies the heap property: in a max heap, for any given node C, if P is a parent node of C, then the key of P is greater than or equal to the key of C. In a min heap, the key of P is less than or equal to the key of C, i.e:
    max heap: 8                               min heap: 0
            /   \                                     /   \
           6     7                                   1      2 
          / \   / \                                 /  \   / \
         3   2  4  5                               4    5 6   7

- Ref links for Heap vs Priority Queue =>
    - https://en.wikipedia.org/wiki/Heap_(data_structure)
    - https://en.wikipedia.org/wiki/Priority_queue
    - https://softwareengineering.stackexchange.com/questions/254947/difference-between-a-heap-and-a-priority-queue

- Difference between a Heap and a Priority Queue => a Priority Queue is an Abstract Data Type (ADT) while a heap is an implementation of the Priority Queue ADT. Check the BigO_Notes.txt file for definition of an ADT. Also note that Priority Queues can be implemented in other ways other than using heaps e.g using an unordered array.

- Timestamp for questions on whether a binary tree is a heap or not (if the tree satisfies the heap invariant or not) => 01:37:57
- Note: all heaps must be trees. A tree that contains a cycle is not a valid heap!

- Uses of Priority Queues => 
    - In certain implementations of Dijkstra's Shortest Path algorithm
    - When fetching the 'next best' or 'next worst' element
    - In Huffman coding for lossless data compression
    - In Best First Search algorithms e.g A* algorithms
    - In Minimum Spanning Tree algorithms

- Time complexity for Priority Queue implemented as Binary Heap => 
    - Binary Heap construction => O(n)
    - Polling/Removing => O(log(n)) coz you have to sort elements to retain heap invariant
    - Peeking => O(1)
    - Adding => O(log(n))
    - Naive removing => O(n)
    - Advanced removing using hash table => O(log(n))
    - Naive contains => O(n)
    - Contains using hash table => O(1)
    - Note that hash table adds overhead to Priority Queue (PQ) implementation and takes up linear space complexity.

- Turning Min PQs to Max PQs => 
    - why: coz most programming languages only provide an implementation of one and not both
    - Method 1: negate the comparable interface used for the PQ. E.g turn x<=y to x>=y not x>y
    - Method 2: for numbers, negate the number before insertion and after polling/removing.

- A few types of heaps =>
    - Binary Heap => A binary tree that supports the heap invariant. In a binary tree every node has only two child nodes.
    - Fibonacci Heap
    - Binomial Heap
    - Pairing Heap etc.

- Complete Binary Tree => a tree where every level is completely filled and all the nodes are as far left as possible.

- Canonical way of representing a binary heap => using Arrays. The root node is usually placed at index 0. If a parent node is at array index i then the left node will be at index 2i + 1 while the right node will be at array index 2i + 2 i.e:
    - parent = i
    - left = 2i+1
    - right = 2i + 2
    - to get parent of current node where index of current node is i => (i - 1) / 2
    - Note that because we are using Arrays inserting to the left-most node in the binary heap simply becomes inserting into the end of the Array!.

- Timestamp for bubbling up elements when inserting into binary heap => 01:56:22
- Timestamp for removing elements from binary heap => 01:59:42

- Polling binary heap => removing the element at the root node
- When polling, we swap the root node with the last node (right most node on last layer of tree), remove the element then bubble down the new (just swapped) root node to keep the heap invariant. While bubbling down we select the child node that is smallest in a min heap and vice versa for a max heap to swap with. If the child nodes are equal we select the left one.

- When removing an element that is not at the root node => 
    - we search for the element in the tree, 
    - swap it with the last node, 
    - remove it then bubble up/down the swapped element until we are back at the heap invariant. 
    - If the swapped element is not at the last layer of the tree then bubble it down since we know that all elements up the tree satisfy the heap invariant.
    
- The first step in the above takes linear time O(n) to do, so to improve this we can use a HashTable to map binary heap nodes (keys) to their indexes (values). This will cause a problem if there are multiple nodes that have the same value so to solve this we can store multiple indexes for a single node i.e the keys in our HashTable/HashMap will be the nodes while the values will be arrays of indexes.