- BigO complexity for arrays =>
    - access => O(1) for both static and dynamic arrays; mostly because of use of indexes
    - search => O(n) for both static and dynamic arrays
    - insertion => O(n) for dynamic arrays. Does not make sense for static arrays
    - appending => O(1) for dynamic arrays. Does not make sense for static arrays
    - deletion => O(n) for dynamic arrays. Does not make sense for static arrays

- Dynamic array => array that grows and shrinks in size as needed i.e does not have a fixed length like a static array e.g ArrayList in Java, Vector in C++

- How to create a dynamic array using static arrays =>
    - Create a static array with an initial capacity
    - Add elements to the initial static array while keeping track of the capacity.
    - If adding a new element will exceed the capacity, create a new static array with double the capacity and copy all elements into the new static array.

- Dynamic array source code =>
    - In Java:
        class DynamicArray {
            private int size;
            private String[] array;

            public DynamicArray() {
                size = 2;
                array = new String[size];
            }

            public boolean isFull() {
                return array[size] != null;
            }

            public void append(String val) {
                if(isFull()) {
                    size = size * 2;
                    array = new String[size];
                } else {
                    for(int i = 0; i < size; i++) {
                        if(array[i] == null) {
                            array[i] = val;
                            break;
                        }
                    }
                }
            }

            public void insert(String val, int index) {
                if(index < 0 || index >= size) {
                    throw new Exception("Invalid array index");
                } else {
                    array[index] = val;
                }
            }

            public void delete(int index) {
                if(index < 0 || index >= size) {
                    throw new Exception("Invalid array index");
                } else {
                    for(int i = index; i < size-1; i++) {
                        array[i] = array[i+1];
                    }
                    array[size-1] = null;
                }
            }
        }
    - Ways to improve the above code =>
        - Make use of generics instead of a String array
        - Make use of two variables to store actual size vs initial size of array
        - Ref: https://github.com/williamfiset/Algorithms/blob/master/src/main/java/com/williamfiset/algorithms/datastructures/dynamicarray/IntArray.java
        - Ref: https://github.com/williamfiset/DEPRECATED-data-structures/blob/master/com/williamfiset/datastructures/dynamicarray/DynamicArray.java
