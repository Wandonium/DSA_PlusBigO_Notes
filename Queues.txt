- What is a Queue => it's a linear data structure that models real life queues with two primary operations enqueue and dequeue. It's a FIFO structure i.e we enqueue from the front of the queue and dequeue from the back of the queue.

- Uses of queues => 
    - Modeling real life queues e.g. managing seats in a Movie Theater app, managing orders in a Food Delivery app.
    - Web server request management where we need a FIFO queue for requests.
    - Breadth first search graph traversal.

- Time complexity for Queues => 
    - Enqueue: O(1)
    - Dequeue: O(1)
    - Peeking: O(1)
    - Contains: O(n)
    - Removal: O(n)
    - IsEmpty: O(1)

- Queue implementation in Java => https://github.com/williamfiset/DEPRECATED-data-structures/tree/master/com/williamfiset/datastructures/queue

- Static Array based queue => 
    import java.util.Iterator;

    public class ArrayBasedQueue<T> implements Iterable {
        private int length;
        private T[] queue;
        private int front;
        private int rear;

        public ArrayBasedQueue(int length) {
            this.length = length;
            queue = (T[]) new Object[length];
            front = 0;
            rear = -1;
        }

        public ArrayBasedQueue(int length, T firstElem) {
            this.length = length;
            queue = (T[]) new Object[length];
            queue[0] = firstElem;
            front = 0;
            rear = -1;
        }

        public int size() {
            return length;
        }

        public boolean isEmpty() {
            return length == 0;
        }

        public T peek() {
            if(isEmpty()) throw new RuntimeException("Queue is empty!");
            return queue[front];
        }

        public T dequeue() {
            if(isEmpty()) throw new RuntimeException("Queue is empty!");
            else {
                T head = queue[front];
                front++;
                return head;
            }
        }

        public boolean isFull() {
            return rear == length - 1;
        }

        public void enqueue(T elem) {
                /*int idx = 0;
                boolean foundTail = false;
                while(!foundTail) {
                    if(idx >= length) {
                        T[] newQueue = new T[length * 2];
                        for(int i = 0; i < length; i++) {
                            newQueue[i] = queue[i];
                        }
                        queue = newQueue;
                        queue[length] = elem;
                        length = length * 2;
                        foundTail = true;
                    } else if(queue[idx] == null) {
                        foundTail = true;
                        queue[idx] = elem;
                    }
                }*/
            if(isFull()) throw new RuntimeException("Queue is full!");
            rear++;
            queue[rear] = elem;
        }

        public static void main(String[] args)   {
            ArrayBasedQueue<Integer> queue = new ArrayBasedQueue<>(10);
            queue.enqueue(2);
            queue.enqueue(3);
            System.out.println("Item deleted from queue: " + queue.dequeue());
            System.out.println("Item deleted from queue: " + queue.dequeue());
            queue.enqueue(5);
            System.out.println("Item deleted from queue: " + queue.dequeue());
        }

        @Override
        public java.util.Iterator<T> iterator() {
            return new java.util.Iterator<T>() {
                int index = 0;

                @Override
                public boolean hasNext() {
                    return index < length;
                }

                @Override
                public T next() {
                    return queue[index++];
                }

                @Override
                public void remove() {
                    throw new UnsupportedOperationException();
                }
            };
        }
    }